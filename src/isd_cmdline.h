/** @file isd_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef ISD_CMDLINE_H
#define ISD_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "isd"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "isd"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * input_arg;	/**< @brief Input file (default : standart input).  */
  char * input_orig;	/**< @brief Input file (default : standart input) original value given at command line.  */
  const char *input_help; /**< @brief Input file (default : standart input) help description.  */
  #if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
  long long int seed_arg;	/**< @brief Seed of the pseudo random generator.  */
  #else
  long seed_arg;	/**< @brief Seed of the pseudo random generator.  */
  #endif
  char * seed_orig;	/**< @brief Seed of the pseudo random generator original value given at command line.  */
  const char *seed_help; /**< @brief Seed of the pseudo random generator help description.  */
  #if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
  long long int max_iter_arg;	/**< @brief Number of iterations to perform before stopping (default=0).  */
  #else
  long max_iter_arg;	/**< @brief Number of iterations to perform before stopping (default=0).  */
  #endif
  char * max_iter_orig;	/**< @brief Number of iterations to perform before stopping original value given at command line.  */
  const char *max_iter_help; /**< @brief Number of iterations to perform before stopping help description.  */
  #if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
  long long int max_sol_arg;	/**< @brief Number of solutions to find before stopping (default=0).  */
  #else
  long max_sol_arg;	/**< @brief Number of solutions to find before stopping (default=0).  */
  #endif
  char * max_sol_orig;	/**< @brief Number of solutions to find before stopping original value given at command line.  */
  const char *max_sol_help; /**< @brief Number of solutions to find before stopping help description.  */
  #if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
  long long int max_time_arg;	/**< @brief Number of second to spend before stopping (default=0).  */
  #else
  long max_time_arg;	/**< @brief Number of second to spend before stopping (default=0).  */
  #endif
  char * max_time_orig;	/**< @brief Number of second to spend before stopping original value given at command line.  */
  const char *max_time_help; /**< @brief Number of second to spend before stopping help description.  */
  int w_arg;	/**< @brief Maximum weight of the word to find (overrides input file value).  */
  char * w_orig;	/**< @brief Maximum weight of the word to find (overrides input file value) original value given at command line.  */
  const char *w_help; /**< @brief Maximum weight of the word to find (overrides input file value) help description.  */
  int l_arg;	/**< @brief Height of the window.  */
  char * l_orig;	/**< @brief Height of the window original value given at command line.  */
  const char *l_help; /**< @brief Height of the window help description.  */
  int p_arg;	/**< @brief Weight of the error in the window.  */
  char * p_orig;	/**< @brief Weight of the error in the window original value given at command line.  */
  const char *p_help; /**< @brief Weight of the error in the window help description.  */
  int threshold_arg;	/**< @brief Threshold on the weight of the first word.  */
  char * threshold_orig;	/**< @brief Threshold on the weight of the first word original value given at command line.  */
  const char *threshold_help; /**< @brief Threshold on the weight of the first word help description.  */
  int l2_arg;	/**< @brief Height of the window in MMT and BJMM algorithms.  */
  char * l2_orig;	/**< @brief Height of the window in MMT and BJMM algorithms original value given at command line.  */
  const char *l2_help; /**< @brief Height of the window in MMT and BJMM algorithms help description.  */
  int alpha_arg;	/**< @brief Inverse proportion of elements of {0, 1}^l2 used to form the set A in MMT algorithm. The set will be composed of 2^(l2-alpha).  */
  char * alpha_orig;	/**< @brief Inverse proportion of elements of {0, 1}^l2 used to form the set A in MMT algorithm. The set will be composed of 2^(l2-alpha) original value given at command line.  */
  const char *alpha_help; /**< @brief Inverse proportion of elements of {0, 1}^l2 used to form the set A in MMT algorithm. The set will be composed of 2^(l2-alpha) help description.  */
  int l3_arg;	/**< @brief Height of the window.  */
  char * l3_orig;	/**< @brief Height of the window original value given at command line.  */
  const char *l3_help; /**< @brief Height of the window help description.  */
  int e1_arg;	/**< @brief Additional error accepted for fusion before filter 1 in BJMM algorithm.  */
  char * e1_orig;	/**< @brief Additional error accepted for fusion before filter 1 in BJMM algorithm original value given at command line.  */
  const char *e1_help; /**< @brief Additional error accepted for fusion before filter 1 in BJMM algorithm help description.  */
  int e2_arg;	/**< @brief Additional error accepted for fusion before filter 2 in BJMM algorithm.  */
  char * e2_orig;	/**< @brief Additional error accepted for fusion before filter 2 in BJMM algorithm original value given at command line.  */
  const char *e2_help; /**< @brief Additional error accepted for fusion before filter 2 in BJMM algorithm help description.  */
  int csize_arg;	/**< @brief number of 64bit int used to represent a column during list merging. Choose l <= csize*64 <= r . min value for minimum spatial complexity, max value for minimum temporal complexity .  */
  char * csize_orig;	/**< @brief number of 64bit int used to represent a column during list merging. Choose l <= csize*64 <= r . min value for minimum spatial complexity, max value for minimum temporal complexity  original value given at command line.  */
  const char *csize_help; /**< @brief number of 64bit int used to represent a column during list merging. Choose l <= csize*64 <= r . min value for minimum spatial complexity, max value for minimum temporal complexity  help description.  */
  int skip_arg;	/**< @brief Number of iteration to skip before beginning (default='0').  */
  char * skip_orig;	/**< @brief Number of iteration to skip before beginning original value given at command line.  */
  const char *skip_help; /**< @brief Number of iteration to skip before beginning help description.  */
  int verbose_arg;	/**< @brief verbosity level (default='1').  */
  char * verbose_orig;	/**< @brief verbosity level original value given at command line.  */
  const char *verbose_help; /**< @brief verbosity level help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int max_iter_given ;	/**< @brief Whether max_iter was given.  */
  unsigned int max_sol_given ;	/**< @brief Whether max_sol was given.  */
  unsigned int max_time_given ;	/**< @brief Whether max_time was given.  */
  unsigned int w_given ;	/**< @brief Whether w was given.  */
  unsigned int l_given ;	/**< @brief Whether l was given.  */
  unsigned int p_given ;	/**< @brief Whether p was given.  */
  unsigned int threshold_given ;	/**< @brief Whether threshold was given.  */
  unsigned int l2_given ;	/**< @brief Whether l2 was given.  */
  unsigned int alpha_given ;	/**< @brief Whether alpha was given.  */
  unsigned int l3_given ;	/**< @brief Whether l3 was given.  */
  unsigned int e1_given ;	/**< @brief Whether e1 was given.  */
  unsigned int e2_given ;	/**< @brief Whether e2 was given.  */
  unsigned int csize_given ;	/**< @brief Whether csize was given.  */
  unsigned int skip_given ;	/**< @brief Whether skip was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* ISD_CMDLINE_H */
